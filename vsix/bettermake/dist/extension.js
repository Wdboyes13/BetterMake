"use strict";var p=Object.create;var r=Object.defineProperty;var u=Object.getOwnPropertyDescriptor;var v=Object.getOwnPropertyNames;var C=Object.getPrototypeOf,j=Object.prototype.hasOwnProperty;var k=(e,o)=>{for(var n in o)r(e,n,{get:o[n],enumerable:!0})},m=(e,o,n,c)=>{if(o&&typeof o=="object"||typeof o=="function")for(let t of v(o))!j.call(e,t)&&t!==n&&r(e,t,{get:()=>o[t],enumerable:!(c=u(o,t))||c.enumerable});return e};var f=(e,o,n)=>(n=e!=null?p(C(e)):{},m(o||!e||!e.__esModule?r(n,"default",{value:e,enumerable:!0}):n,e)),b=e=>m(r({},"__esModule",{value:!0}),e);var h={};k(h,{activate:()=>g,deactivate:()=>P});module.exports=b(h);var i=f(require("vscode"));function g(e){console.log("BetterMake is now active");let o=i.commands.registerCommand("bettermake.build",()=>{let c=i.window.activeTextEditor,t=i.window.createTerminal("BetterMake");t.show(),t.sendText("java -jar BetterMake.jar")});e.subscriptions.push(o);let n=i.commands.registerCommand("bettermake.mkproj",async()=>{let c=await i.window.showInputBox({placeHolder:"Enter Project Name"}),t=await i.window.showQuickPick(["C","C++","Objective-C","Objective-C++"],{placeHolder:"Pick Project Language"}),l=await i.window.showQuickPick(["Multi File","Single File"],{placeHolder:"Pick Project Type"}),d=await i.window.showInputBox({placeHolder:"Enter Main File Name ex. main.c"});if(c&&t&&l&&d){let a=null,s=null;if(t==="C"&&(a="C"),t==="C++"&&(a="CPP"),t==="Objective-C"&&(a="OBJC"),t==="Objective-C++"&&(a="OBJCPP"),l==="Multi File"&&(s="MF"),l==="Single File"&&(s="OF"),s!==null&&a!==null){let w=i.window.createTerminal("BetterMake");w.show(),w.sendText(`curl -fsSL https://tinyurl.com/BMAutoConf | bash -s  ${c} ${d} ${s} ${a} `)}}});e.subscriptions.push(n)}function P(){}0&&(module.exports={activate,deactivate});
